// Code generated by MockGen. DO NOT EDIT.
// Source: ../../internal/walhallapi/types.go

// Package main is a generated GoMock package.
package main

import (
	gomock "github.com/golang/mock/gomock"
	walhallapi "humanitec.io/walhallapiadaptor/internal/walhallapi"
	reflect "reflect"
)

// MockWalhallAPIer is a mock of WalhallAPIer interface
type MockWalhallAPIer struct {
	ctrl     *gomock.Controller
	recorder *MockWalhallAPIerMockRecorder
}

// MockWalhallAPIerMockRecorder is the mock recorder for MockWalhallAPIer
type MockWalhallAPIerMockRecorder struct {
	mock *MockWalhallAPIer
}

// NewMockWalhallAPIer creates a new mock instance
func NewMockWalhallAPIer(ctrl *gomock.Controller) *MockWalhallAPIer {
	mock := &MockWalhallAPIer{ctrl: ctrl}
	mock.recorder = &MockWalhallAPIerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWalhallAPIer) EXPECT() *MockWalhallAPIerMockRecorder {
	return m.recorder
}

// GetCurrentUser mocks base method
func (m *MockWalhallAPIer) GetCurrentUser() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentUser")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCurrentUser indicates an expected call of GetCurrentUser
func (mr *MockWalhallAPIerMockRecorder) GetCurrentUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentUser", reflect.TypeOf((*MockWalhallAPIer)(nil).GetCurrentUser))
}

// ListOrgs mocks base method
func (m *MockWalhallAPIer) ListOrgs() (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrgs")
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrgs indicates an expected call of ListOrgs
func (mr *MockWalhallAPIerMockRecorder) ListOrgs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrgs", reflect.TypeOf((*MockWalhallAPIer)(nil).ListOrgs))
}

// ListApps mocks base method
func (m *MockWalhallAPIer) ListApps(orgName string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApps", orgName)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApps indicates an expected call of ListApps
func (mr *MockWalhallAPIerMockRecorder) ListApps(orgName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApps", reflect.TypeOf((*MockWalhallAPIer)(nil).ListApps), orgName)
}

// ListModules mocks base method
func (m *MockWalhallAPIer) ListModules(orgName string) ([]walhallapi.Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModules", orgName)
	ret0, _ := ret[0].([]walhallapi.Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModules indicates an expected call of ListModules
func (mr *MockWalhallAPIerMockRecorder) ListModules(orgName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModules", reflect.TypeOf((*MockWalhallAPIer)(nil).ListModules), orgName)
}

// RefreshModules mocks base method
func (m *MockWalhallAPIer) RefreshModules(orgName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshModules", orgName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshModules indicates an expected call of RefreshModules
func (mr *MockWalhallAPIerMockRecorder) RefreshModules(orgName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshModules", reflect.TypeOf((*MockWalhallAPIer)(nil).RefreshModules), orgName)
}

// GetRefreshModulesStatus mocks base method
func (m *MockWalhallAPIer) GetRefreshModulesStatus(orgName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshModulesStatus", orgName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefreshModulesStatus indicates an expected call of GetRefreshModulesStatus
func (mr *MockWalhallAPIerMockRecorder) GetRefreshModulesStatus(orgName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshModulesStatus", reflect.TypeOf((*MockWalhallAPIer)(nil).GetRefreshModulesStatus), orgName)
}

// ListEnvs mocks base method
func (m *MockWalhallAPIer) ListEnvs(orgName, appName string) ([]walhallapi.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvs", orgName, appName)
	ret0, _ := ret[0].([]walhallapi.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvs indicates an expected call of ListEnvs
func (mr *MockWalhallAPIerMockRecorder) ListEnvs(orgName, appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvs", reflect.TypeOf((*MockWalhallAPIer)(nil).ListEnvs), orgName, appName)
}

// GetEnv mocks base method
func (m *MockWalhallAPIer) GetEnv(orgName, appName, envName string) (walhallapi.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnv", orgName, appName, envName)
	ret0, _ := ret[0].(walhallapi.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnv indicates an expected call of GetEnv
func (mr *MockWalhallAPIerMockRecorder) GetEnv(orgName, appName, envName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnv", reflect.TypeOf((*MockWalhallAPIer)(nil).GetEnv), orgName, appName, envName)
}

// PatchEnv mocks base method
func (m *MockWalhallAPIer) PatchEnv(env walhallapi.Environment, moduleVersions []int) (walhallapi.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchEnv", env, moduleVersions)
	ret0, _ := ret[0].(walhallapi.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchEnv indicates an expected call of PatchEnv
func (mr *MockWalhallAPIerMockRecorder) PatchEnv(env, moduleVersions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchEnv", reflect.TypeOf((*MockWalhallAPIer)(nil).PatchEnv), env, moduleVersions)
}

// DeleteModuleVersionFromEnv mocks base method
func (m *MockWalhallAPIer) DeleteModuleVersionFromEnv(env walhallapi.Environment, mv walhallapi.ModuleVersion) (walhallapi.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteModuleVersionFromEnv", env, mv)
	ret0, _ := ret[0].(walhallapi.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteModuleVersionFromEnv indicates an expected call of DeleteModuleVersionFromEnv
func (mr *MockWalhallAPIerMockRecorder) DeleteModuleVersionFromEnv(env, mv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModuleVersionFromEnv", reflect.TypeOf((*MockWalhallAPIer)(nil).DeleteModuleVersionFromEnv), env, mv)
}

// GetConfigsForModuleVersionInEnv mocks base method
func (m *MockWalhallAPIer) GetConfigsForModuleVersionInEnv(env walhallapi.Environment, mv walhallapi.ModuleVersion) ([]walhallapi.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigsForModuleVersionInEnv", env, mv)
	ret0, _ := ret[0].([]walhallapi.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigsForModuleVersionInEnv indicates an expected call of GetConfigsForModuleVersionInEnv
func (mr *MockWalhallAPIerMockRecorder) GetConfigsForModuleVersionInEnv(env, mv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigsForModuleVersionInEnv", reflect.TypeOf((*MockWalhallAPIer)(nil).GetConfigsForModuleVersionInEnv), env, mv)
}

// UpdateConfiguration mocks base method
func (m *MockWalhallAPIer) UpdateConfiguration(config walhallapi.Config) (walhallapi.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfiguration", config)
	ret0, _ := ret[0].(walhallapi.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConfiguration indicates an expected call of UpdateConfiguration
func (mr *MockWalhallAPIerMockRecorder) UpdateConfiguration(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfiguration", reflect.TypeOf((*MockWalhallAPIer)(nil).UpdateConfiguration), config)
}

// CreateConfiguration mocks base method
func (m *MockWalhallAPIer) CreateConfiguration(env walhallapi.Environment, mv walhallapi.ModuleVersion, configType string) (walhallapi.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfiguration", env, mv, configType)
	ret0, _ := ret[0].(walhallapi.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfiguration indicates an expected call of CreateConfiguration
func (mr *MockWalhallAPIerMockRecorder) CreateConfiguration(env, mv, configType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfiguration", reflect.TypeOf((*MockWalhallAPIer)(nil).CreateConfiguration), env, mv, configType)
}

// DeleteConfiguration mocks base method
func (m *MockWalhallAPIer) DeleteConfiguration(configID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfiguration", configID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteConfiguration indicates an expected call of DeleteConfiguration
func (mr *MockWalhallAPIerMockRecorder) DeleteConfiguration(configID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfiguration", reflect.TypeOf((*MockWalhallAPIer)(nil).DeleteConfiguration), configID)
}

// DeployToEnvironment mocks base method
func (m *MockWalhallAPIer) DeployToEnvironment(env walhallapi.Environment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployToEnvironment", env)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeployToEnvironment indicates an expected call of DeployToEnvironment
func (mr *MockWalhallAPIerMockRecorder) DeployToEnvironment(env interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployToEnvironment", reflect.TypeOf((*MockWalhallAPIer)(nil).DeployToEnvironment), env)
}
